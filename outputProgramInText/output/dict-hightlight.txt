

--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/global.d.ts ---

/// <reference types="vite/client" />

declare const __APP_VERSION__: string


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/manifest.ts ---

import { defineManifest } from '@crxjs/vite-plugin'
import packageData from '../package.json'

//@ts-ignore
const isDev = process.env.NODE_ENV == 'development'

export default defineManifest({
  name: `${packageData.displayName || packageData.name}${isDev ? ` ➡️ Dev` : ''}`,
  description: packageData.description,
  version: packageData.version,
  manifest_version: 3,
  icons: {
    16: 'img/logo-16.png',
    32: 'img/logo-34.png',
    48: 'img/logo-48.png',
    128: 'img/logo-128.png',
  },
  action: {
    default_popup: 'popup.html',
    default_icon: 'img/logo-48.png',
  },
  options_page: 'options.html',
  devtools_page: 'devtools.html',
  background: {
    service_worker: 'src/background/index.ts',
    type: 'module',
  },
  content_scripts: [
    {
      matches: ['http://*/*', 'https://*/*'],
      js: ['src/contentScript/index.ts'],
    },
  ],
  side_panel: {
    default_path: 'sidepanel.html',
  },
  web_accessible_resources: [
    {
      resources: ['img/logo-16.png', 'img/logo-34.png', 'img/logo-48.png', 'img/logo-128.png'],
      matches: [],
    },
  ],
  permissions: ['sidePanel', 'storage', 'contextMenus','scripting', 'tabs'],
  host_permissions: [
    "<all_urls>"
  ],
  chrome_url_overrides: {
    newtab: 'newtab.html',
  },
})


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/zip.js ---

import gulp from 'gulp'
import zip from 'gulp-zip'
import { createRequire } from 'module'
const require = createRequire(import.meta.url)
const manifest = require('../build/manifest.json')

gulp
  .src('build/**')
  .pipe(zip(`${manifest.name.replaceAll(' ', '-')}-${manifest.version}.zip`))
  .pipe(gulp.dest('package'))


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/devtools/index.css ---

:root {
  font-family:
    system-ui,
    -apple-system,
    BlinkMacSystemFont,
    'Segoe UI',
    Roboto,
    Oxygen,
    Ubuntu,
    Cantarell,
    'Open Sans',
    'Helvetica Neue',
    sans-serif;

  color-scheme: light dark;
  background-color: #242424;
}

@media (prefers-color-scheme: light) {
  :root {
    background-color: #fafafa;
  }
}

body {
  min-width: 20rem;
  margin: 0;
}


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/devtools/index.tsx ---

import React from 'react'
import ReactDOM from 'react-dom/client'
import { DevTools } from './DevTools'
import './index.css'

ReactDOM.createRoot(document.getElementById('app') as HTMLElement).render(
  <React.StrictMode>
    <DevTools />
  </React.StrictMode>,
)

chrome.devtools.panels.create('ReactCrx', '', '../../devtools.html', function () {
  console.log('devtools panel create')
})


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/devtools/DevTools.tsx ---

import './DevTools.css'

export const DevTools = () => {
  const link = 'https://github.com/guocaoyi/create-chrome-ext'

  return (
    <main>
      <h3>DevTools Page</h3>
      <a href={link} target="_blank">
        generated by create-chrome-ext
      </a>
    </main>
  )
}

export default DevTools


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/devtools/DevTools.css ---

@media (prefers-color-scheme: light) {
  a:hover {
    color: #61dafb;
  }
}

body {
  min-width: 20rem;
}

main {
  text-align: center;
  padding: 1em;
  margin: 0 auto;
}

h3 {
  color: #61dafb;
  text-transform: uppercase;
  font-size: 1.5rem;
  font-weight: 200;
  line-height: 1.2rem;
  margin: 2rem auto;
}

a {
  font-size: 0.5rem;
  margin: 0.5rem;
  color: #cccccc;
  text-decoration: none;
}


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/sidepanel/index.css ---

:root {
  font-family:
    system-ui,
    -apple-system,
    BlinkMacSystemFont,
    'Segoe UI',
    Roboto,
    Oxygen,
    Ubuntu,
    Cantarell,
    'Open Sans',
    'Helvetica Neue',
    sans-serif;

  color-scheme: light dark;
  background-color: #242424;
}

@media (prefers-color-scheme: light) {
  :root {
    background-color: #fafafa;
  }
}

body {
  min-width: 20rem;
  margin: 0;
}


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/sidepanel/SidePanel.tsx ---

import { useState, useEffect } from 'react'

import './SidePanel.css'

export const SidePanel = () => {
  const [countSync, setCountSync] = useState(0)
  const link = 'https://github.com/guocaoyi/create-chrome-ext'

  useEffect(() => {
    chrome.storage.sync.get(['count'], (result) => {
      setCountSync(result.count || 0)
    })

    chrome.runtime.onMessage.addListener((request) => {
      if (request.type === 'COUNT') {
        setCountSync(request.count || 0)
      }
    })
  }, [])

  return (
    <main>
      <h3>SidePanel Page</h3>
      <h4>Count from Popup: {countSync}</h4>
      <a href={link} target="_blank">
        generated by create-chrome-ext
      </a>
    </main>
  )
}

export default SidePanel


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/sidepanel/index.tsx ---

import React from 'react'
import ReactDOM from 'react-dom/client'
import { SidePanel } from './SidePanel'
import './index.css'

ReactDOM.createRoot(document.getElementById('app') as HTMLElement).render(
  <React.StrictMode>
    <SidePanel />
  </React.StrictMode>,
)


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/sidepanel/SidePanel.css ---

@media (prefers-color-scheme: light) {
  a:hover {
    color: #61dafb;
  }
}

main {
  text-align: center;
  padding: 1em;
  margin: 0 auto;
}

h3 {
  color: #61dafb;
  text-transform: uppercase;
  font-size: 1.5rem;
  font-weight: 200;
  line-height: 1.2rem;
  margin: 2rem auto;
}

a {
  font-size: 0.5rem;
  margin: 0.5rem;
  color: #cccccc;
  text-decoration: none;
}


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/assets/logo.png ---

Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte

--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/popup/index.css ---

:root {
  font-family:
    system-ui,
    -apple-system,
    BlinkMacSystemFont,
    'Segoe UI',
    Roboto,
    Oxygen,
    Ubuntu,
    Cantarell,
    'Open Sans',
    'Helvetica Neue',
    sans-serif;

  color-scheme: light dark;
  background-color: #242424;
}

@media (prefers-color-scheme: light) {
  :root {
    background-color: #fafafa;
  }
}

body {
  min-width: 20rem;
  margin: 0;
}


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/popup/Popup.tsx ---

import { useState, useEffect } from 'react'

import './Popup.css'

export const Popup = () => {
  const [count, setCount] = useState(0)
  const link = 'https://github.com/guocaoyi/create-chrome-ext'

  const minus = () => {
    if (count > 0) setCount(count - 1)
  }

  const add = () => setCount(count + 1)

  useEffect(() => {
    chrome.storage.sync.get(['count'], (result) => {
      setCount(result.count || 0)
    })
  }, [])

  useEffect(() => {
    chrome.storage.sync.set({ count })
    chrome.runtime.sendMessage({ type: 'COUNT', count })
  }, [count])

  return (
    <main>
      <h3>Popup Page</h3>
      <div className="calc">
        <button onClick={minus} disabled={count <= 0}>
          -
        </button>
        <label>{count}</label>
        <button onClick={add}>+</button>
      </div>
      <a href={link} target="_blank">
        generated by create-chrome-ext
      </a>
    </main>
  )
}

export default Popup


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/popup/index.tsx ---

import React from 'react'
import ReactDOM from 'react-dom/client'
import { Popup } from './Popup'
import './index.css'

ReactDOM.createRoot(document.getElementById('app') as HTMLElement).render(
  <React.StrictMode>
    <Popup />
  </React.StrictMode>,
)


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/popup/Popup.css ---

@media (prefers-color-scheme: light) {
  a:hover {
    color: #61dafb;
  }
}

main {
  text-align: center;
  padding: 1em;
  margin: 0 auto;
}

h3 {
  color: #61dafb;
  text-transform: uppercase;
  font-size: 1.5rem;
  font-weight: 200;
  line-height: 1.2rem;
  margin: 2rem auto;
}

.calc {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 2rem;

  & > button {
    font-size: 1rem;
    padding: 0.5rem 1rem;
    border: 1px solid #61dafb;
    border-radius: 0.25rem;
    background-color: transparent;
    color: #61dafb;
    cursor: pointer;
    outline: none;

    width: 3rem;
    margin: 0 a;
  }

  & > label {
    font-size: 1.5rem;
    margin: 0 1rem;
  }
}

a {
  font-size: 0.5rem;
  margin: 0.5rem;
  color: #cccccc;
  text-decoration: none;
}


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/background/index.ts ---

console.log('background is running')

chrome.runtime.onMessage.addListener((request) => {
  if (request.type === 'COUNT') {
    console.log('background has received a message from popup, and count is ', request?.count)
  }
})


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/options/index.css ---

:root {
  font-family:
    system-ui,
    -apple-system,
    BlinkMacSystemFont,
    'Segoe UI',
    Roboto,
    Oxygen,
    Ubuntu,
    Cantarell,
    'Open Sans',
    'Helvetica Neue',
    sans-serif;

  color-scheme: light dark;
  background-color: #242424;
}

@media (prefers-color-scheme: light) {
  :root {
    background-color: #fafafa;
  }
}

body {
  min-width: 20rem;
  margin: 0;
}


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/options/index.tsx ---

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './Options'
import './index.css'

ReactDOM.createRoot(document.getElementById('app') as HTMLElement).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/options/Options.css ---

@media (prefers-color-scheme: light) {
  a:hover {
    color: #61dafb;
  }
}

body {
  min-width: 20rem;
}

main {
  text-align: center;
  padding: 1em;
  margin: 0 auto;
}

h3 {
  color: #61dafb;
  text-transform: uppercase;
  font-size: 1.5rem;
  font-weight: 200;
  line-height: 1.2rem;
  margin: 2rem auto;
}

a {
  font-size: 0.5rem;
  margin: 0.5rem;
  color: #cccccc;
  text-decoration: none;
}


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/options/Options.tsx ---

import { useState, useEffect } from 'react'

import './Options.css'

export const Options = () => {
  const [countSync, setCountSync] = useState(0)
  const link = 'https://github.com/guocaoyi/create-chrome-ext'

  useEffect(() => {
    chrome.storage.sync.get(['count'], (result) => {
      setCountSync(result.count || 0)
    })

    chrome.runtime.onMessage.addListener((request) => {
      if (request.type === 'COUNT') {
        setCountSync(request.count || 0)
      }
    })
  }, [])

  return (
    <main>
      <h3>Options Page</h3>
      <h4>Count from Popup: {countSync}</h4>
      <a href={link} target="_blank">
        generated by create-chrome-ext
      </a>
    </main>
  )
}

export default Options


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/contentScript/index.ts ---

let triggerKey: string = 'Ctrl'; // 默认触发键
let selectedText: string = '';
let popup: HTMLDivElement | null = null;

// 使用防抖函数优化selectionchange事件处理
const debounce = <F extends (...args: any[]) => void>(func: F, delay: number): F => {
  let timeoutId: ReturnType<typeof setTimeout>;
  return ((...args: Parameters<F>) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func(...args), delay);
  }) as F;
};

// 优化选中文本事件监听
document.addEventListener('selectionchange', debounce(() => {
  const selection = window.getSelection();
  selectedText = selection ? selection.toString().trim() : '';
}, 200));

// 优化键盘事件监听
document.addEventListener('keydown', (event: KeyboardEvent) => {
  if (event.ctrlKey && selectedText) {
    const selection = window.getSelection();
    if (selection && selection.rangeCount > 0) {
      const range = selection.getRangeAt(0);
      const rect = range.getBoundingClientRect();
      showPopup(selectedText, rect.left, rect.bottom);
    }
  }
  if (event.key === 'Escape' && popup) {
    popup.style.display = 'none';
  }
});

// 点击其他区域关闭弹出窗口
document.addEventListener('click', (event: MouseEvent) => {
  if (popup && !popup.contains(event.target as Node)) {
    popup.style.display = 'none';
  }
});

function showPopup(word: string, x: number, y: number): void {
  if (!popup) {
    popup = document.createElement('div');
    popup.id = 'extension-popup';
    popup.style.cssText = `
      position: fixed;
      z-index: 9999;
      background: white;
      border: 1px solid #ccc;
      border-radius: 4px;
      padding: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.2);
      max-width: 300px;
      font-family: Arial, sans-serif;
      display: none;
    `;
    document.body.appendChild(popup);
  }

  const viewportWidth = window.innerWidth;
  const viewportHeight = window.innerHeight;
  const popupWidth = 300;
  const popupHeight = 150;

  let left = Math.min(x, viewportWidth - popupWidth - 10);
  let top = Math.min(y, viewportHeight - popupHeight - 10);

  popup.style.left = `${left}px`;
  popup.style.top = `${top}px`;

  popup.innerHTML = `<p>正在查询: ${word}...</p>`;
  popup.style.display = 'block';

  fetchDefinition(word)
    .then(definition => {
      if (popup) {
        popup.innerHTML = `
          <h3>${word}</h3>
          <p>${definition}</p>
          <button id="closePopup">关闭</button>
        `;
        const closeButton = document.getElementById('closePopup');
        if (closeButton) {
          closeButton.onclick = () => {
            if (popup) popup.style.display = 'none';
          };
        }
      }
    })
    .catch(error => {
      if (popup) {
        popup.innerHTML = `<p>查询失败: ${error.message}</p>`;
      }
    });
}

async function fetchDefinition(word: string): Promise<string> {
  try {
    const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);
    if (!response.ok) throw new Error('词典查询失败');
    const data = await response.json();
    return data[0].meanings[0].definitions[0].definition;
  } catch (error) {
    console.error('获取定义时出错:', error);
    throw error;
  }
}

// 从storage中获取配置的触发键
chrome.storage.sync.get('triggerKey', (data: { triggerKey?: string }) => {
  if (data.triggerKey) {
    triggerKey = data.triggerKey;
  }
});

// 监听来自popup或options的消息,更新触发键
chrome.runtime.onMessage.addListener((request: { action: string; key: string }, sender, sendResponse) => {
  if (request.action === 'updateTriggerKey') {
    triggerKey = request.key;
  }
});


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/newtab/index.css ---

:root {
  font-family:
    system-ui,
    -apple-system,
    BlinkMacSystemFont,
    'Segoe UI',
    Roboto,
    Oxygen,
    Ubuntu,
    Cantarell,
    'Open Sans',
    'Helvetica Neue',
    sans-serif;

  color-scheme: light dark;
  background-color: #242424;
}

@media (prefers-color-scheme: light) {
  :root {
    background-color: #fafafa;
  }
}

body {
  min-width: 20rem;
  margin: 0;
}


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/newtab/index.tsx ---

import React from 'react'
import ReactDOM from 'react-dom/client'
import { NewTab } from './NewTab'
import './index.css'

ReactDOM.createRoot(document.getElementById('app') as HTMLElement).render(
  <React.StrictMode>
    <NewTab />
  </React.StrictMode>,
)


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/newtab/NewTab.tsx ---

import { useState, useEffect } from 'react'

import './NewTab.css'

export const NewTab = () => {
  const getTime = () => {
    const date = new Date()
    const hour = String(date.getHours()).padStart(2, '0')
    const minute = String(date.getMinutes()).padStart(2, '0')
    return `${hour}:${minute}`
  }

  const [time, setTime] = useState(getTime())
  const link = 'https://github.com/guocaoyi/create-chrome-ext'

  useEffect(() => {
    let intervalId = setInterval(() => {
      setTime(getTime())
    }, 1000)

    return () => {
      clearInterval(intervalId)
    }
  }, [])

  return (
    <section>
      <span></span>
      <h1>{time}</h1>
      <a href={link} target="_blank">
        generated by create-chrome-ext
      </a>
    </section>
  )
}

export default NewTab


--- /home/riobigdan/workspace/tt/ttfe/extension/my-dict-highlight/src/newtab/NewTab.css ---

section::before {
  content: '';
  position: fixed;
  z-index: -1;
  width: 100vw;
  height: 100vh;
  background-image: url('https://source.unsplash.com/random');
  background-size: cover;
  filter: blur(10px);
}

section {
  width: 100vw;
  height: 100vh;

  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
}

h1 {
  color: #61dafb;
  text-transform: uppercase;
  font-size: 6rem;
  margin: 2rem auto;
}

a {
  font-size: 0.5rem;
  margin: 0.5rem;
  color: #cccccc;
  text-decoration: none;
}
